(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["fetch-plus"] = factory();
	else
		root["fetch-plus"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
	                                                                                                                                                                                                                                                                   * @copyright Â© 2015, Rick Wong. All rights reserved.
	                                                                                                                                                                                                                                                                   */


	var _queryString = __webpack_require__(3);

	var _queryString2 = _interopRequireDefault(_queryString);

	var _compute = __webpack_require__(1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var _trimSlashes = function _trimSlashes(string) {
		return string.toString().replace(/(^\/+|\/+$)/g, "");
	};

	var createClient = function createClient(url) {
		var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var middlewares = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

		var endpoint = {
			url: url,
			options: options,
			middlewares: {}
		};

		endpoint.request = request.bind(null, endpoint);
		endpoint.get = get.bind(null, endpoint);
		endpoint.post = post.bind(null, endpoint);
		endpoint.patch = patch.bind(null, endpoint);
		endpoint.put = put.bind(null, endpoint);
		endpoint.del = del.bind(null, endpoint);
		endpoint.browse = browse.bind(null, endpoint);
		endpoint.read = read.bind(null, endpoint);
		endpoint.edit = edit.bind(null, endpoint);
		endpoint.replace = replace.bind(null, endpoint);
		endpoint.add = add.bind(null, endpoint);
		endpoint.destroy = destroy.bind(null, endpoint);
		endpoint.list = endpoint.browse;
		endpoint.update = endpoint.edit;
		endpoint.create = endpoint.add;

		endpoint.addMiddleware = addMiddleware.bind(null, endpoint);
		endpoint.removeMiddleware = removeMiddleware.bind(null, endpoint);

		if (middlewares.length) {
			middlewares.forEach(endpoint.addMiddleware);
		}

		return endpoint;
	};

	var middlewareId = 23000;

	function addMiddleware(_endpoint, middleware) {
		if (!middleware._middlewareId) {
			middleware._middlewareId = middlewareId++;
		}

		_endpoint.middlewares[middleware._middlewareId] = middleware;

		return _endpoint;
	}

	function removeMiddleware(_endpoint, middleware) {
		if (!middleware._middlewareId) {
			return;
		}

		if (_endpoint.middlewares[middleware._middlewareId]) {
			delete _endpoint.middlewares[middleware._middlewareId];
		}

		return _endpoint;
	}

	var _callFetch = function _callFetch(endpoint) {
		var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		var afterMiddlewares = [];
		var errorMiddlewares = [];
		var fetchFunc = void 0;
		var normalizeFunc = _trimSlashes;

		if (typeof options.normalizeUrl === "function") {
			normalizeFunc = options.normalizeUrl;
		} else if (typeof endpoint.options.normalizeUrl === "function") {
			normalizeFunc = endpoint.options.normalizeUrl;
		}

		return new Promise(function (resolve, reject) {
			var url = normalizeFunc((0, _compute.compute)(endpoint.url));

			path = (0, _compute.compute)(path);

			if (!(path instanceof Array)) {
				path = [path];
			}

			path = normalizeFunc(path.map(_compute.compute).map(encodeURI).join("/"));

			if (path && path[0] !== "/") {
				path = "/" + path;
			}

			if (typeof options.fetch === "function") {
				fetchFunc = options.fetch;
			} else if (typeof endpoint.options.fetch === "function") {
				fetchFunc = endpoint.options.fetch;
			} else if (typeof fetch === "function") {
				fetchFunc = fetch;
			} else {
				throw new TypeError("fetch() function not available");
			}

			options = _extends({
				headers: {}
			}, (0, _compute.computeObject)(endpoint.options), (0, _compute.computeObject)(options));

			resolve({ url: url, path: path, options: options });
		}).then(function (request) {
			var endpointMiddlewares = [];

			Object.keys(endpoint.middlewares).forEach(function (key) {
				endpointMiddlewares.push(endpoint.middlewares[key]);
			});

			[].concat(endpointMiddlewares, _toConsumableArray(middlewares)).forEach(function (before) {
				var result = before(request);

				if (typeof result === "function") {
					afterMiddlewares.push(result);
				} else if ((typeof result === "undefined" ? "undefined" : _typeof(result)) === "object") {
					var _result$after = result.after,
					    after = _result$after === undefined ? null : _result$after,
					    _result$error = result.error,
					    error = _result$error === undefined ? null : _result$error;


					if (typeof after === "function") {
						afterMiddlewares.push(after);
					}
					if (typeof error === "function") {
						errorMiddlewares.push(error);
					}
				}
			});

			var query = request.options.query || "";

			if ((typeof query === "undefined" ? "undefined" : _typeof(query)) === "object") {
				query = "?" + _queryString2.default.stringify((0, _compute.computeObject)(query));
			} else if (query !== "") {
				query = "?" + (0, _compute.compute)(query);
			}

			return fetchFunc(request.url + request.path + query, request.options);
		}).then(function (response) {
			if (!response.ok) {
				throw response;
			}

			if (!afterMiddlewares.length) {
				return response;
			}

			var promise = Promise.resolve(response).catch(function (error) {
				throw error;
			});

			afterMiddlewares.forEach(function (after) {
				promise = promise.then(after);
			});

			return promise;
		}).catch(function (error) {
			if (!errorMiddlewares.length) {
				throw error;
			}

			var recovered = null;

			errorMiddlewares.some(function (errorMiddleware) {
				try {
					return recovered = errorMiddleware(error);
				} catch (e) {
					error = e;
				}
			});

			if (recovered) {
				return recovered;
			}

			throw error;
		});
	};

	var _expectEven = function _expectEven(array) {
		array = (0, _compute.compute)(array);

		if (array instanceof Array && array.length % 2 !== 0) {
			throw new RangeError("Expected even array");
		}

		return array;
	};

	var _expectOdd = function _expectOdd(array) {
		array = (0, _compute.compute)(array);

		if (array instanceof Array && array.length % 2 !== 1) {
			throw new RangeError("Expected odd array");
		}

		return array;
	};

	function request(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return _callFetch(_endpoint, path, _extends({ action: "request" }, options), middlewares);
	}

	function get(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return request(_endpoint, path, _extends({ action: "get", method: "GET" }, options), middlewares);
	}

	function post(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return request(_endpoint, path, _extends({ action: "post", method: "POST" }, options), middlewares);
	}

	function patch(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return request(_endpoint, path, _extends({ action: "patch", method: "PATCH" }, options), middlewares);
	}

	function put(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return request(_endpoint, path, _extends({ action: "put", method: "PUT" }, options), middlewares);
	}

	function del(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return request(_endpoint, path, _extends({ action: "del", method: "DELETE" }, options), middlewares);
	}

	function browse(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return get(_endpoint, function () {
			return _expectOdd(path);
		}, _extends({ action: "browse" }, options), middlewares);
	}

	function read(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return get(_endpoint, function () {
			return _expectEven(path);
		}, _extends({ action: "read" }, options), middlewares);
	}

	function edit(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return patch(_endpoint, function () {
			return _expectEven(path);
		}, _extends({ action: "edit" }, options), middlewares);
	}

	function replace(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return put(_endpoint, function () {
			return _expectEven(path);
		}, _extends({ action: "replace" }, options), middlewares);
	}

	function add(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return post(_endpoint, function () {
			return _expectOdd(path);
		}, _extends({ action: "add" }, options), middlewares);
	}

	function destroy(_endpoint, path) {
		var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		var middlewares = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		return del(_endpoint, function () {
			return _expectEven(path);
		}, _extends({ action: "destroy" }, options), middlewares);
	}

	var _dropInFetch = function _dropInFetch(url) {
		var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		var middlewares = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

		return _callFetch({
			url: url,
			options: options,
			middlewares: {}
		}, "", {}, middlewares);
	};

	module.exports = {
		// Fetch+ API:
		createClient: createClient,
		connectEndpoint: createClient, // deprecated
		addMiddleware: addMiddleware,
		removeMiddleware: removeMiddleware,
		// Drop-in replacement:
		fetch: _dropInFetch,
		// Generic:
		request: request,
		get: get,
		post: post,
		patch: patch,
		put: put,
		del: del,
		// BREAD:
		browse: browse,
		read: read,
		edit: edit,
		add: add,
		destroy: destroy,
		// CRUD:
		list: browse,
		update: edit,
		create: add,
		// Utilities:
		compute: _compute.compute,
		computeObject: _compute.computeObject
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * @copyright Â© 2015, Rick Wong. All rights reserved.
	 */

	var _isScalar = function _isScalar(value) {
		return value === undefined || value === null || typeof value === "string" || typeof value === "number" || typeof value === "boolean";
	};

	var compute = function compute(value) {
		return typeof value === "function" ? value() : value;
	};

	var computeObject = function computeObject(object) {
		object = compute(object);

		if (_isScalar(object)) {
			return object;
		}

		var mapped = Array.isArray(object) ? [] : {};

		Object.keys(object).forEach(function (key) {
			var value = object[key];

			if (_isScalar(value)) {
				mapped[key] = value;
			} else if (((typeof FormData === "undefined" ? "undefined" : _typeof(FormData)) === "object" || typeof FormData === "function") && value instanceof FormData) {
				mapped[key] = value;
			} else if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
				mapped[key] = computeObject(value);
			} else {
				mapped[key] = compute(value);
			}
		});

		return mapped;
	};

	module.exports = {
		compute: compute,
		computeObject: computeObject
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strictUriEncode = __webpack_require__(4);
	var objectAssign = __webpack_require__(2);

	function encode(value, opts) {
		if (opts.encode) {
			return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
		}

		return value;
	}

	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};

	exports.parse = function (str) {
		// Create an object with no prototype
		// https://github.com/sindresorhus/query-string/issues/47
		var ret = Object.create(null);

		if (typeof str !== 'string') {
			return ret;
		}

		str = str.trim().replace(/^(\?|#|&)/, '');

		if (!str) {
			return ret;
		}

		str.split('&').forEach(function (param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;

			key = decodeURIComponent(key);

			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);

			if (ret[key] === undefined) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
		});

		return ret;
	};

	exports.stringify = function (obj, opts) {
		var defaults = {
			encode: true,
			strict: true
		};

		opts = objectAssign(defaults, opts);

		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];

			if (val === undefined) {
				return '';
			}

			if (val === null) {
				return encode(key, opts);
			}

			if (Array.isArray(val)) {
				var result = [];

				val.slice().forEach(function (val2) {
					if (val2 === undefined) {
						return;
					}

					if (val2 === null) {
						result.push(encode(key, opts));
					} else {
						result.push(encode(key, opts) + '=' + encode(val2, opts));
					}
				});

				return result.join('&');
			}

			return encode(key, opts) + '=' + encode(val, opts);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};


/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};


/***/ }
/******/ ])
});
;